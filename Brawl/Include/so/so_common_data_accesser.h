#pragma once

#include <GX/GXTypes.h>
#include <nw4r/g3d/g3d_resfile.h>
#include <types.h>

// TODO: Define and move to other headers
class ftShakeData { };
class ftJostleData { };
class ftEffectCommonData { };
class ftEffectScreenData { };
class ftIkData { };

struct soCommonParamFloat {
    float m_0[0x28];
};

struct soCommonParamInt {
    s32 m_0[0x5];
};

struct soCommonParamIndefinite {
    s32* m_0;
};

struct soCommonParam {
    float m_0;
    float m_4;
    float m_8;
    float m_C;

    s32 m_10;
    s32 m_14;
    float m_18;
    float m_1C;

    float m_20;
    float m_24;
    float m_28;
    float m_2C;

    float m_30;
    float m_34;
    float m_38;
    float m_3C;

    float m_40;
    s32 m_44;
    float m_48;
    float m_4C;

    float m_50;
    float m_54;
    s32 m_58;
    float m_5C;

    float m_60;
    s32 m_64;
    u8 unk68[0x4];
    float m_6C;

    float m_70;
    float m_74;
    float m_78;
    float m_7C;

    float m_80;
    float m_84;
    float m_88;
    float m_8C;

    float m_90;
    float m_94;
    float m_98;
    float m_9C;

    float m_A0;
    float m_A4;
    float m_A8;
    float m_AC;

    float m_B0;
    float m_B4;
    s32 m_B8;
};

class ftCommonParamFloat {
    float m_0[0x17E];
};

class ftCommonParamIndefinite {
    s32* m_0[0x5];
};

class ftCommonParamInt {
    s32 m_0[0x8D];
};

class ftCommonParam {
    s32 m_0;
    float m_4;
    float m_8;
    float m_c;
    float m_10;
    float m_14;
    float m_18;
    s32 m_1c;
    float m_20;
    float m_24;
    s32 m_28;
    s32 m_2c;
    float m_30;
    float m_34;
    float m_38;
    float m_3c;
    float m_40;
    s32 m_44;
    float m_48;
    float m_4c;
    float m_50;
    float m_54;
    float m_58;
    float m_5c;
    float m_60;
    float m_64;
    float m_68;
    s32 m_6c;
    float m_70;
    float m_74;
    float m_78;
    float m_7c;
    float m_80;
    float m_84;
    s32 m_88;
    float m_8c;
    float m_90;
    float m_94;
    float m_98;
    s32 m_9c;
    float m_a0;
    s32 m_a4;
    float m_a8;
    float m_ac;
    float m_b0;
    float m_b4;
    float m_b8;
    float m_bc;
    float m_c0;
    float m_c4;
    float m_c8;
    float m_cc;
    float m_d0;
    float m_d4;
    float m_d8;
    float m_dc;
    float m_e0;
    float m_e4;
    float m_e8;
    float m_ec;
    s32 m_f0;
    float m_f4;
    s32 m_f8;
    float m_fc;
    float m_100;
    float m_104;
    float m_108;
    float m_10c;
    s32 m_110;
    float m_114;
    float m_118;
    float m_11c;
    float m_120;
    float m_124;
    s32 m_128;
    float m_12c;
    float m_130;
    float m_134;
    float m_138;
    float m_13c;
    s32 m_140;
    float m_144;
    float m_148;
    float m_14c;
    s32 m_150;
    s32 m_154;
    float m_158;
    s32 m_15c;
    float m_160;
    float m_164;
    float m_168;
    float m_16c;
    float m_170;
    s32 m_174;
    float m_178;
    s32 m_17c;
    s32 m_180;
    float m_184;
    float m_188;
    s32 m_18c;
    s32 m_190;
    float m_194;
    float m_198;
    s32 m_19c;
    s32 m_1a0;
    s32 m_1a4;
    float m_1a8;
    float m_1ac;
    s32 m_1b0;
    s32 m_1b4;
    float m_1b8;
    float m_1bc;
    float m_1c0;
    float m_1c4;
    float m_1c8;
    float m_1cc;
    float m_1d0;
    float m_1d4;
    s32 m_1d8;
    float m_1dc;
    float m_1e0;
    float m_1e4;
    float m_1e8;
    float m_1ec;
    s32 m_1f0;
    s32 m_1f4;
    float m_1f8;
    s32 m_1fc;
    float m_200;
    float m_204;
    s32 m_208;
    s32 m_20c;
    float cursorForceDispDistance;
    s32 m_214;
    s32 m_218;
    s32 m_21c;
    s32 m_220;
    s32 m_224;
    float m_228;
    float m_22c;
    float m_230;
    s32 noDiscretionFinalCount;
    float m_238;
    float m_23c;
    float m_240;
    s32 m_244;
    float m_248;
    s32 m_24c;
    s32 m_250;
    float m_254;
    s32 m_258;
    float m_25c;
    float m_260;
    float m_264;
    s32 m_268;
    float m_26c;
    float m_270;
    s32 m_274;
    float m_278;
    float m_27c;
    s32 m_280;
    float m_284;
    float m_288;
    float m_28c;
    s32 m_290;
    float m_294;
    float m_298;
    s32 m_29c;
    float m_2a0;
    float m_2a4;
    float m_2a8;
    float m_2ac;
    float m_2b0;
    float m_2b4;
    float m_2b8;
    float m_2bc;
    float m_2c0;
    float m_2c4;
    float m_2c8;
    float m_2cc;
    float m_2d0;
    float m_2d4;
    s32 m_2d8;
    s32 m_2dc;
    float m_2e0;
    float m_2e4;
    float m_2e8;
    float m_2ec;
    float m_2f0;
    float m_2f4;
    float m_2f8;
    s32 m_2fc;
    s32 m_300;
    float m_304;
    s32 m_308;
    float m_30c;
    float m_310;
    float m_314;
    float m_318;
    float m_31c;
    s32 m_320;
    s32 m_324;
    float m_328;
    float m_32c;
    s32 m_330;
    float m_334;
    float m_338;
    float m_33c;
    float m_340;
    float m_344;
    float m_348;
    s32 m_34c;
    float m_350;
    float m_354;
    float m_358;
    s32 m_35c;
    s32 m_360;
    s32 m_364;
    float m_368;
    float m_36c;
    float m_370;
    float m_374;
    float m_378;
    float m_37c;
    s32 m_380;
    s32 m_384;
    float m_388;
    float m_38c;
    float m_390;
    float m_394;
    s32 m_398;
    float m_39c;
    float m_3a0;
    s32 m_3a4;
    float m_3a8;
    float m_3ac;
    float m_3b0;
    float m_3b4;
    s32 m_3b8;
    float m_3bc;
    float m_3c0;
    float m_3c4;
    float m_3c8;
    float m_3cc;
    float m_3d0;
    float m_3d4;
    float m_3d8;
    float m_3dc;
    s32 m_3e0;
    s32 m_3e4;
    s32 m_3e8;
    s32 m_3ec;
    float m_3f0;
    float m_3f4;
    float m_3f8;
    float m_3fc;
    float m_400;
    float m_404;
    float m_408;
    float m_40c;
    float m_410;
    s32 m_414;
    float m_418;
    float m_41c;
    float m_420;
    float m_424;
    float m_428;
    float m_42c;
    float m_430;
    float m_434;
    float m_438;
    float m_43c;
    float m_440;
    float m_444;
    float m_448;
    float m_44c;
    float m_450;
    float m_454;
    s32 m_458;
    s32 m_45c;
    s32 m_460;
    s32 m_464;
    float m_468;
    float m_46c;
    float m_470;
    float m_474;
    float m_478;
    float m_47c;
    float m_480;
    float m_484;
    float m_488;
    float m_48c;
    float m_490;
    float m_494;
    float m_498;
    float m_49c;
    float m_4a0;
    float m_4a4;
    float m_4a8;
    float m_4ac;
    float m_4b0;
    float m_4b4;
    float m_4b8;
    float m_4bc;
    float m_4c0;
    float m_4c4;
    s32 m_4c8;
    float m_4cc;
    float m_4d0;
    float m_4d4;
    float m_4d8;
    float m_4dc;
    float m_4e0;
    float m_4e4;
    float m_4e8;
    float m_4ec;
    s32 m_4f0;
    float m_4f4;
    float m_4f8;
    float m_4fc;
    float m_500;
    float m_504;
    float m_508;
    float m_50c;
    float m_510;
    float m_514;
    float m_518;
    float m_51c;
    float m_520;
    float m_524;
    float m_528;
    s32 m_52c;
    s32 m_530;
    float m_534;
    float m_538;
    float m_53c;
    s32 m_540;
    float m_544;
    float m_548;
    float m_54c;
    s32 m_550;
    float m_554;
    float m_558;
    s32 m_55c;
    s32 m_560;
    s32 m_564;
    float m_568;
    float m_56c;
    s32 m_570;
    s32 m_574;
    float m_578;
    float m_57c;
    float m_580;
    s32 m_584;
    s32 m_588;
    s32 m_58c;
    s32 m_590;
    float m_594;
    float m_598;
    float m_59c;
    s32 m_5a0;
    float m_5a4;
    float m_5a8;
    float m_5ac;
    float m_5b0;
    float m_5b4;
    float m_5b8;
    float m_5bc;
    float m_5c0;
    s32 m_5c4;
    float m_5c8;
    float m_5cc;
    float m_5d0;
    float m_5d4;
    float m_5d8;
    float m_5dc;
    float m_5e0;
    float m_5e4;
    s32 m_5e8;
    float m_5ec;
    float m_5f0;
    float m_5f4;
    float m_5f8;
    float m_5fc;
    float m_600;
    float m_604;
    float m_608;
    float m_60c;
    float m_610;
    float m_614;
    float m_618;
    float m_61c;
    float m_620;
    float m_624;
    float m_628;
    float m_62c;
    float m_630;
    float m_634;
    float m_638;
    float m_63c;
    float m_640;
    float m_644;
    float m_648;
    float m_64c;
    float m_650;
    float m_654;
    float m_658;
    float m_65c;
    float m_660;
    float m_664;
    float m_668;
    float m_66c;
    float m_670;
    float m_674;
    float m_678;
    float m_67c;
    float m_680;
    float m_684;
    float m_688;
    float m_68c;
    float m_690;
    float m_694;
    float m_698;
    float m_69c;
    float m_6a0;
    float m_6a4;
    float m_6a8;
    float m_6ac;
    float m_6b0;
    float m_6b4;
    float m_6b8;
    float m_6bc;
    float m_6c0;
    float m_6c4;
    float m_6c8;
    float m_6cc;
    float m_6d0;
    s32 m_6d4;
    float m_6d8;
    float m_6dc;
    float m_6e0;
    float m_6e4;
    s32 m_6e8;
    s32 m_6ec;
    s32 m_6f0;
    s32 m_6f4;
    s32 m_6f8;
    s32 m_6fc;
    s32 m_700;
    s32 m_704;
    s32 m_708;
    float m_70c;
    float m_710;
    s32 m_714;
    float m_718;
    s32 m_71c;
    float m_720;
    float m_724;
    float m_728;
    float m_72c;
    float m_730;
    s32 m_734;
    s32 m_738;
    s32 m_73c;
    s32 m_740;
    s32 m_744;
    s32 m_748;
    float m_74c;
    float m_750;
    float m_754;
    float m_758;
    float m_75c;
    float m_760;
    s32 m_764;
    float m_768;
    float m_76c;
    float m_770;
    s32 m_774;
    s32 m_778;
    float m_77c;
    float m_780;
    s32 m_784;
    s32 m_788;
    s32 m_78c;
    s32 m_790;
    float m_794;
    float m_798;
    float m_79c;
    float m_7a0;
    float m_7a4;
    float m_7a8;
    float m_7ac;
    float m_7b0;
    s32 m_7b4;
    float m_7b8;
    s32 m_7bc;
    float m_7c0;
    float m_7c4;
    float m_7c8;
    float m_7cc;
    s32 m_7d0;
    s32 m_7d4;
    s32 m_7d8;
    float m_7dc;
    float m_7e0;
    s32 m_7e4;
    s32 m_7e8;
    s32 m_7ec;
    s32 m_7f0;
    s32 m_7f4;
    s32 m_7f8;
    s32 m_7fc;
    s32 m_800;
    float m_804;
    float m_808;
    float m_80c;
    float m_810;
    float m_814;
    float m_818;
    float m_81c;
    s32 m_820;
    float m_824;
    s32 m_828;
    float m_82c;
    float m_830;
    float m_834;
    float m_838;
    float m_83c;
    float m_840;
    s32 m_844;
    s32 m_848;
    s32 m_84c;
    float m_850;
    float m_854;
    float m_858;
    float m_85c;
    float m_860;
    s32 m_864;
    s32 m_868;
    s32 m_86c;
    s32 m_870;
    float m_874;
    float m_878;
    float m_87c;
    float m_880;
    float m_884;
    float m_888;
    float m_88c;
    float m_890;
    s32 m_894;
    float m_898;
};

class ftDataCommon {
    soCommonParam* soCommonParams[2];
    ftCommonParam* ftCommonParams[2];
    void* commonActionEntryScripts;
    void* commonActionExitScripts;
    void* flashOverlayScripts;
    ftShakeData* shakeData;
    u8 unk20[0x8];
    ftJostleData* jostleData;
    u8 unk2C[0x1C];
    GXColor subColors;
    ftEffectCommonData* effectCommonData;
    ftEffectScreenData* effectScreenData;
    ftIkData* ikData;
};

class soCommonDataAccesser {
    nw4r::g3d::ResFileData* resFileTex;
    nw4r::g3d::ResFileData* resFileAnim;
    soCommonParam** commonData;
    soCommonParamFloat paramFloats[2];
    soCommonParamInt paramInts[2];
    soCommonParamIndefinite paramIndefinites[2];
public:
    soCommonDataAccesser() : resFileTex(0), resFileAnim(0) { }
    ~soCommonDataAccesser() { }
    void setupCommonParam(soCommonParam** p2);
    float getParamCommonFloat(u32 p1, u32 p2);
    s32 getParamCommonInt(u32 p1, u32 p2);
    s32* getParamCommonIndefinite(u32 p1, u32 p2);
};

soCommonDataAccesser g_soCommonDataAccesser;
